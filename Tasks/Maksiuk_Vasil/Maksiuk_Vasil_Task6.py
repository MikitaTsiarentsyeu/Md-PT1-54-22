# 1. Написать рекурсивную функцию для вычисления суммы всех элементов вложенных (любая глубина) списков.
# Пример списка (синтаксис Python): [1, 2, [2, 4, [[7, 8], 4, 6]]], сумма элементов - 34

def deep_sum(l):
    sum =0
    for i in l:
        if isinstance(i, list):
            deep_sum(i)
        else:
            sum = sum + i
    return sum
             
deep_sum([1, 2, [2, 4, [[7, 8], 4, 6]]])

    

# 2. Написать рекурсивную функцию для вычисления и вывода n первых чисел Фибоначчи.
# Примеры вызова: 
# fib(5) -> 0,1,1,2,3
# fib(10) -> 0,1,1,2,3,5,8,13,21,34

def fib(x, n=0, l=[0,1]):
    if n != x-2:
        n  
        l.append(l[-2]+l[-1])
        fib(x, n+1, l)
    if n== 0:
        print(l)


fib(5) #-> 0,1,1,2,3. При первом использовании ф-ции получаем [0, 1, 1, 2, 3]
fib(10) #-> Второе использование. Должно  получиться 0,1,1,2,3,5,8,13,21,34. 
# Но на выходе имеем [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]. 
# Т.е. во 2-й раз в результат вмешивается  результат 1-й ф-ции, т.е. получаем лишние (...55, 89, 144]).
# Хотя по отдельности все работает идеально, но меня огорчает то, что получилась такая "одноразовая" функция.

def fib(x):
    i = 1
    l = [0,1]
    while i != x-1:
        l.append(l[-2] + l[-1])
        i += 1
    print(l)
    

fib(5)
fib(10) # Без рекурсии всё работает идеально.